[{"title":"自我介绍","date":"2017-02-15T07:04:55.644Z","path":"2017/02/15/自我介绍/","text":"XinMing-Liu.github.io#————剑锋在磨砺，梅香在苦寒 #先来一段百度到的一篇短文，感觉写的很好，很适合我这里就索性引用一下。123456789在沧海中,我是一粒沙. 我,隐藏在茫茫人海中.我既没有柔美的身段,也没有亮丽的双眸,但我有进取的心,有似水的梦怀,有崇高的理想,我坚信腹有诗书气自华. 我,不愿随波逐流.在《未选择的路》中弗罗斯特曾写过：“黄色的树林里分出两条路,可惜我不能同时去涉足.”“而我选择了人迹更少的一条,从此决定了我一生的道路.”只融于大众的我便成为了实实在在的平凡人.我不愿去走别人庸俗的老路,去过跟别人同样庸俗的生活.在偷觑他人的同时,也否定了自己.&lt;p 我,不愿随波逐流.在《未选择的路》中弗罗斯特曾写过：“黄色的树林里分出两条路,可惜我不能同时去涉足.”“而我选择了人迹更少的一条,从此决定了我一生的道路.”只融于大众的我便成为了实实在在的平凡人.我不愿去走别人庸俗的老路,去过跟别人同样庸俗的生活.在偷觑他人的同时,也否定了自己. 我,幽默宽容.我向来不喜欢看别人满面怒容的样子,我认为他人的笑才是天下最美的风景.所以每天,我都会变成一颗开心果,尽可能地给他们带去欢乐.“比大地宽阔的是海洋,比海洋宽阔的是天空,比天空宽阔的是人的心灵.”宽容使狭隘的胸怀容纳百川,所以对待别人的过失,我都付笑谈中. 我,要做自己.齐白石老先生曾说过；“学我者生,似我者死.”走不出前人的框架,自然也就不会有自己的天地.当流行泡沫小说时,我感觉那时在浪费时间,当流行网络游戏时,我感觉那是在虚度青春.要做自己,看清真实的我,拿出十二分的信心,告诉自己：“我就是我,凭什么跟他一样?!”抛掉那些人为的浮华雕饰,亮出自己的王牌,追求自己的个性,做我自己,最好! 我,积极进取.小小的我是一粒沙,但不甘于落后,一生庸碌无为.我愿做生命的酋长,做一粒不朽的珍珠泪.路漫漫其修远兮,吾将上下而求索.我渴望朝向艺术之塔,文化之巅,事业之厦,庆功之缘,不负这繁花似锦的时代,留一行扎实稳健的足迹,把美和爱洒向人间…… 这就是我,风华正茂的我,意气风发的我. 这就是我,幽默宽容的我,不甘落后的我. #下边就介绍一下我的工作经历。 在这里写的文章，都是我所了解的领域，或者从事过的。这可能会对看我写的文章有一定的指引作用。我是14年毕业的大学生，虽然工作了两年多了，依然保持着我是刚毕业的大学生的心态：时刻学习。我是10级电子信息专业毕业，学电子自我感觉枯燥无味，感觉计算机专业不错。所以大学我就自学了计算专业的很多东西：PS，3D MAX，CAD,C#,JAVA,C,汇编，HTML，网络工程等等。后来毕业，刚开始志气满满，我想放弃原本电子专业的工作方向，找个计算机或者设计美术方向的工作。找了一段时间发现并不顺利。毕竟自学的东西不够系统，面试的HR多少也会有些看法。有一家叫 中海达 的公司决定要我，去做3d原型设计.因为学校还有毕业答辩等一系列的问题。后来决定重新考虑我的方向，无意间联系了一家做通讯的公司。（有过面试经历的都会知道，当你面试很多家之后你要求的条件会越来低）抱着先工作之后再考虑的心态办理了入职。也是我工作的第一家公司。通信行业也算是与我本专业相通的行业。算是又回到电子专业上，由于大学课程学习的还可以，很快就上手了，截止目前交出的徒弟也不少了。后来感觉通讯也就那么回事，指令就是那么一些像get . defaultroute ；st cell；st rru；license server等。每天处理的问题无非就那么几种，驻波比；掉电；高误码；时钟校准失败等等处理步骤也是那几条指令。刚开始是做基站督导，后来在移动联通后台。发现同样的无聊，后来开始我人生的第二次选择。android程序员，基于之前大学的积累，开始自学，自学了大约三四个月，提出离职来到北京找到第一份android开发的工作。写安卓应用的后来发现我有很多需要继续掌握的东西，就开了我的知识积累的开始。写了一段时间的apk，由于个人原因离职了，来到这一家开发系统的公司。在这里让我学到了很多，即便是每天加班到九点依然过的很开心，因为我每天或多或少都有所收获。身边同事都很厉害，阿里，360等核心主干组成的团队体验就是不一样，公司的制度让我体验了一次，之前从不奢求的工作环境，工作氛围。刚开始先从底层做起，这其实也符合我只菜鸟。由于我们开发的是android系统，开始我开发了一段时间预置应用，像计算器，录音机，问题反馈，文本编辑器等等后来就开始适配工作，虽然每个人都说适配是一个辛苦活，但是我发现有学到了很多之前从没接触到的东西，让我对系统架构有了深入的了解。由于我们的工作环境是ubuntu，之前我是没怎么接触，所以就从学习基本的linux指令开始。之后学习git指令，repo指令这些必备技能差不多了，就开始了适配工作，首先了解了我们系统的主要修改，及每个目录对应的功能。然后有机会调试系统源码，调试系统中的frameworks中的一些东西。了解了android的编译原理，修复编译的各种问题。当编译了解的差不多了对于整个系统操作就发现更加得心应手了。后来系统上出现的各种问题处理起来就没感觉那么吃力了，当然这里边处理问题的思路很重要，不要看到问题心慌。有问题定位问题的能力是在处理问题中慢慢积累的。这里这要说明几点，遇到问题问几个为什么？原生系统有没有这个问题？原生问题就找厂商处理。加上我们的代码之后的问题，就看这个问题是不是在nexus上也出现？nexus上有的问题是开发人员要处理的。剩下的就是我处理的问题。现在，就要去追源码，wifi模块就要去看wifi相关的代码。窗口模块就要看窗口的代码。不同厂家的代码规范不一样，像MTK的代码，他们一般不修改谷歌的原始代码而是添加overlay的形式去实现他们想要的效果。这种情况是防不胜防的。只能慢慢研究了。还有要想有更高的工作效率就多学学git指令，通过git管理你的仓库会发现便捷很多。","tags":[]},{"title":"Android 启动过程详解","date":"2017-02-15T02:54:22.988Z","path":"2017/02/15/Android-启动过程详解/","text":"1今天系统遇到一个问题，问题描述是这样的：开机或者是重启平板的时候经常会卡在OS动画进不去系统，需要强制关机或者是按复位孔在重新开机才能进系统。 这样有机会深入了解开机的具体过程。 首先，百度了一下先关资料(如下)： Android 启动过程简介 其实这些之前也是有所了解的，不过通过这次机会可以重新认识一下。 ####详解 Android系统在启动时首先会启动Linux基础系统，然后引导加载Linux Kernel并启动初始化进程（Init），在第一个进程中会读取init.rc。在这个文件中会启动servicemanager,zygote……等基本的服务。 在init.c@system/core/init。会调用parse_config_file(init.rc)解析脚本文件init.rc init.rc一般会在devices目录下 包括系统的初始化创建文件夹，设置文件权限，初始话启动服务等都在init.rc中配置例如以下截取的部分片段：123#GPS mkdir /data/gps_mnl 0771 gps system mkdir /data/misc/gps 0770 gps system 123#bootanation 启动on property:init.svc.bootanim=runningwrite /proc/bootprof &quot;BOOT_Animation:START&quot; 1234567#wlan0初始话service dhcpcd_wlan0 /system/bin/dhcpcd -BK -dd class main user root group net_admin net_raw disabled oneshot 我这里看的是mtk中的init.rc文件。如下不同的模块的初始化可以放在相应的rc文件中1234567891011import init.project.rcimport /FWUpgradeInit.rcimport init.xlog.rcimport init.aee.rcimport init.fon.rcimport init.volte.rcimport init.mal.rcimport init.epdg.rcimport init.trustonic.rcimport init.common_svc.rcimport init.mt8173.usb.rc （在frameworks\\base\\core\\jni文件夹下存在com_android_internel_os_ZygoteInit.cpp文件。在此文件中通过register_com_android_internel_os_ZygoteInit函数调用AndroidRuntime::registerNativeMethods函数。）最终会调用到frameworks/base/core/jni/AndroidRuntime.cpp的start()方法。事实上，Android API与本地方法的注册关联就是在AndroidRuntime.cpp模块里完成的。","tags":[]},{"title":"Android SDK 目录详解","date":"2017-02-10T02:24:01.157Z","path":"2017/02/10/Android-SDK目录详解/","text":"对于整套安卓源码是个复杂的庞大的工程，我将尽我所能将所有目录及结构将明白，首先我们先来了解每个目录是做什么的。初级了解可以不必纠结android版本存在的差异，先做一次大体的了解。下边我基于android6.0来分析，以下是所有目录。1234567891011121314151617181920212223242526272829abi/art/bionic/ （bionic C库）bootable/ （启动引导相关代码）build/ 编译脚本（makefile shell（bash））cts/ （Android兼容性测试套件标准）dalvik/ 虚拟机相关工具developers/ 开发工具和例子程序源码development/ 开发工具和例子程序源码device/ 厂家目录docs/ 说明文档external/ 三方开源库代码（android使用的一些开源的模组）frameworks/ 应用框架源码gen/hardware/ 硬件抽象层源码（部分厂家开源的硬解适配层HAL代码）libcore/libnativehelper/Makefilendk/ 开发本地工具箱代码out/ 编译结果packages/ 应用程序及包的源码pdk/platform_testing/prebuilts/ （x86和arm架构下预编译的一些资源）projectFilesBackup/sdk/ 应用程序开发工具箱中工具源代码（sdk及模拟器）system/ 系统核心程序和本地服务程序源码（底层文件系统库、应用及组件——C语言）tools/vendor/ 厂家预制应用及修改原生系统源码（厂商定制代码） 这些目录，其中大部分是做安卓开发无法涉猎的，其实它也是不是我们做安卓开发所要去修改的，而是由底层ROM驱动工程师去改的。说白了就是跟我们没关系。 这里我推荐以下几个目录做重点了解：build；frameworks；external；out；packages；system；vendor；device如果你想在一款nexs上开发一套自己的全新系统了解这些足够了。（贪多吃不烂，这个道理不必多说现在开始） ######以下是我从各个网站整理的部分目录功能的介绍（了解）。123456789101112131415161718192021222324252627282930313233343536373839bionic 目录|-- libc （C库）| |-- arch-arm （ARM架构，包含系统调用汇编实现）| |-- arch-x86 （x86架构，包含系统调用汇编实现）| |-- bionic （由C实现的功能，架构无关）| |-- docs （文档）| |-- include （头文件）| |-- inet （？inet相关，具体作用不明）| |-- kernel （Linux内核中的一些头文件）| |-- netbsd （？nesbsd系统相关，具体作用不明）| |-- private （？一些私有的头文件）| |-- stdio （stdio实现）| |-- stdlib （stdlib实现）| |-- string （string函数实现）| |-- tools （几个工具）| |-- tzcode （时区相关代码）| |-- unistd （unistd实现）| `-- zoneinfo （时区信息）|-- libdl （libdl实现，dl是动态链接，提供访问动态链接库的功能）|-- libm （libm数学库的实现，）| |-- alpha （apaha架构）| |-- amd64 （amd64架构）| |-- arm （arm架构）| |-- bsdsrc （？bsd的源码）| |-- i386 （i386架构）| |-- i387 （i387架构？）| |-- ia64 （ia64架构）| |-- include （头文件）| |-- man （数学函数，后缀名为.3，一些为freeBSD的库文件）| |-- powerpc （powerpc架构）| |-- sparc64 （sparc64架构）| `-- src （源代码）|-- libstdc++ （libstdc++ C++实现库）| |-- include （头文件）| `-- src （源码）|-- libthread_db （多线程程序的调试器库）| `-- include （头文件）`-- linker （动态链接器）`-- arch （支持arm和x86两种架构） 1234567891011121314151617181920212223bootable 目录.|-- bootloader （适合各种bootloader的通用代码）| `-- legacy （估计不能直接使用，可以参考）| |-- arch_armv6 （V6架构，几个简单的汇编文件）| |-- arch_msm7k （高通7k处理器架构的几个基本驱动）| |-- include （通用头文件和高通7k架构头文件）| |-- libboot （启动库，都写得很简单）| |-- libc （一些常用的c函数）| |-- nandwrite （nandwirte函数实现）| `-- usbloader （usbloader实现）|-- diskinstaller （android镜像打包器，x86可生产iso）`-- recovery （系统恢复相关） |-- edify （升级脚本使用的edify脚本语言） |-- etc （init.rc恢复脚本） |-- minui （一个简单的UI） |-- minzip （一个简单的压缩工具） |-- mtdutils （mtd工具） |-- res （资源） | `-- images （一些图片） |-- tools （工具） | `-- ota （OTA Over The Air Updates升级工具）`-- updater （升级器） 1234567891011121314151617181920212223242526272829303132333435build目录.|-- core （核心编译规则）|-- history （历史记录）|-- libs| `-- host （主机端库，有android “cp”功能替换）|-- target （目标机编译对象）| |-- board （开发平台）| | |-- emulator （模拟器）| | |-- generic （通用）| | |-- idea6410 （自己添加的）| | `-- sim （最简单）| `-- product （开发平台对应的编译规则）| `-- security （密钥相关）`-- tools （编译中主机使用的工具及脚本） |-- acp （Android &quot;acp&quot; Command） |-- apicheck （api检查工具） |-- applypatch （补丁工具） |-- apriori （预链接工具） |-- atree （tree工具） |-- bin2asm （bin转换为asm工具） |-- check_prereq （检查编译时间戳工具） |-- dexpreopt （模拟器相关工具，具体功能不明） |-- droiddoc （？作用不明，java语言，网上有人说和JDK5有关） |-- fs_config （This program takes a list of files and directories） |-- fs_get_stats （获取文件系统状态） |-- iself （判断是否ELF格式） |-- isprelinked （判断是否prelinked） |-- kcm （按键相关） |-- lsd （List symbol dependencies） |-- releasetools （生成镜像的工具及脚本） |-- rgb2565 （rgb转换为565） |-- signapk （apk签名工具） |-- soslim （strip工具）`-- zipalign （zip archive alignment tool） 1234567891011121314151617dalvik目录 dalvik虚拟机.|-- dalvikvm （main.c的目录）|-- dexdump （dex反汇编）|-- dexlist （List all methods in all concrete classes in a DEX file.）|-- dexopt （预验证与优化）|-- docs （文档）|-- dvz （和zygote相关的一个命令）|-- dx （dx工具，将多个java转换为dex）|-- hit （？java语言写成）|-- libcore （核心库）|-- libcore-disabled （？禁用的库）|-- libdex （dex的库）|-- libnativehelper （Support functions for Android&apos;s class libraries）|-- tests （测试代码）|-- tools （工具）`-- vm （虚拟机实现） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455```development 目录 （开发者需要的一些例程及工具）|-- apps （一些核心应用程序）| |-- BluetoothDebug （蓝牙调试程序）| |-- CustomLocale （自定义区域设置）| |-- Development （开发）| |-- Fallback （和语言相关的一个程序）| |-- FontLab （字库）| |-- GestureBuilder （手势动作）| |-- NinePatchLab （？）| |-- OBJViewer （OBJ查看器）| |-- SdkSetup （SDK安装器）| |-- SpareParts （高级设置）| |-- Term （远程登录）| `-- launchperf （？）|-- build （编译脚本模板）|-- cmds （有个monkey工具）|-- data （配置数据）|-- docs （文档）|-- host （主机端USB驱动等）|-- ide （集成开发环境）|-- ndk （本地开发套件——c语言开发套件）|-- pdk （Plug Development Kit）|-- samples （例程）| |-- AliasActivity （？）| |-- ApiDemos （API演示程序）| |-- BluetoothChat （蓝牙聊天）| |-- BrowserPlugin （浏览器插件）| |-- BusinessCard （商业卡）| |-- Compass （指南针）| |-- ContactManager （联系人管理器）| |-- CubeLiveWallpaper （动态壁纸的一个简单例程）| |-- FixedGridLayout （像是布局）| |-- GlobalTime （全球时间）| |-- HelloActivity （Hello）| |-- Home （Home）| |-- JetBoy （jetBoy游戏）| |-- LunarLander （貌似又是一个游戏）| |-- MailSync （邮件同步）| |-- MultiResolution （多分辨率）| |-- MySampleRss （RSS）| |-- NotePad （记事本）| |-- RSSReader （RSS阅读器）| |-- SearchableDictionary （目录搜索）| |-- SimpleJNI （JNI例程）| |-- SkeletonApp （空壳APP）| |-- Snake （snake程序）| |-- SoftKeyboard （软键盘）| |-- Wiktionary （？维基）| `-- WiktionarySimple（？维基例程）|-- scripts （脚本）|-- sdk （sdk配置）|-- simulator （？模拟器）|-- testrunner （？测试用）`-- tools （一些工具） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374external 目录.|-- aes （AES加密）|-- apache-http （网页服务器）|-- astl （ASTL (Android STL) is a slimmed-down version of the regular C++ STL.）|-- bison （自动生成语法分析器，将无关文法转换成C、C++）|-- blktrace （blktrace is a block layer IO tracing mechanism）|-- bluetooth （蓝牙相关、协议栈）|-- bsdiff （diff工具）|-- bzip2 （压缩工具）|-- clearsilver （html模板系统）|-- dbus （低延时、低开销、高可用性的IPC机制）|-- dhcpcd （DHCP服务）|-- dosfstools （DOS文件系统工具）|-- dropbear （SSH2的server）|-- e2fsprogs （EXT2文件系统工具）|-- elfcopy （复制ELF的工具）|-- elfutils （ELF工具）|-- embunit （Embedded Unit Project）|-- emma （java代码覆盖率统计工具）|-- esd （Enlightened Sound Daemon，将多种音频流混合在一个设备上播放）|-- expat （Expat is a stream-oriented XML parser.）|-- fdlibm （FDLIBM (Freely Distributable LIBM)）|-- freetype （字体）|-- fsck_msdos （dos文件系统检查工具）|-- gdata （google的无线数据相关）|-- genext2fs （genext2fs generates an ext2 filesystem as a normal (non-root) user）|-- giflib （gif库）|-- googleclient （google用户库）|-- grub （This is GNU GRUB, the GRand Unified Bootloader.）|-- gtest （Google C++ Testing Framework）|-- icu4c （ICU(International Component for Unicode)在C/C++下的版本）|-- ipsec-tools （This package provides a way to use the native IPsec functionality ）|-- iptables （防火墙）|-- jdiff （generate a report describing the difference between two public Java APIs.）|-- jhead （jpeg头部信息工具）|-- jpeg （jpeg库）|-- junit （JUnit是一个Java语言的单元测试框架）|-- kernel-headers （内核的一些头文件）|-- libffi （libffi is a foreign function interface library.）|-- libpcap （网络数据包捕获函数）|-- libpng （png库）|-- libxml2 （xml解析库）|-- mtpd （一个命令）|-- netcat （simple Unix utility which reads and writes dataacross network connections）|-- netperf （网络性能测量工具）|-- neven （看代码和JNI相关）|-- opencore （多媒体框架）|-- openssl （SSL加密相关）|-- openvpn （VPN开源库）|-- oprofile （OProfile是Linux内核支持的一种性能分析机制。）|-- ping （ping命令）|-- ppp （pppd拨号命令，好像还没有chat）|-- proguard （Java class file shrinker, optimizer, obfuscator, and preverifier）|-- protobuf （a flexible, efficient, automated mechanism for serializing structured data）|-- qemu （arm模拟器）|-- safe-iop （functions for performing safe integer operations ）|-- skia （skia图形引擎）|-- sonivox （sole MIDI solution for Google Android Mobile Phone Platform）|-- speex （Speex编/解码API的使用(libspeex)）|-- sqlite （数据库）|-- srec （Nuance 公司提供的开源连续非特定人语音识别）|-- strace （trace工具）|-- svox （Embedded Text-to-Speech）|-- tagsoup （TagSoup是一个Java开发符合SAX的HTML解析器）|-- tcpdump （抓TCP包的软件）|-- tesseract （Tesseract Open Source OCR Engine.）|-- tinyxml （TinyXml is a simple, small, C++ XML parser）|-- tremor （I stream and file decoder provides an embeddable,integer-only library）|-- webkit （浏览器核心）|-- wpa_supplicant （无线网卡管理）|-- xmlwriter （XML 编辑工具）|-- yaffs2 （yaffs文件系统）`-- zlib （a general purpose data compression library） 123456789101112131415161718192021222324252627282930313233343536frameworks 目录 （核心框架——java及C++语言）.|-- base （基本内容）| |-- api （？都是xml文件，定义了java的api？）| |-- awt （AWT库）| |-- build （空的）| |-- camera （摄像头服务程序库）| |-- cmds （重要命令：am、app_proce等）| |-- core （核心库）| |-- data （字体和声音等数据文件）| |-- docs （文档）| |-- graphics （图形相关）| |-- include （头文件）| |-- keystore （和数据签名证书相关）| |-- libs （库）| |-- location （地区库）| |-- media （媒体相关库）| |-- obex （蓝牙传输库）| |-- opengl （2D-3D加速库）| |-- packages （设置、TTS、VPN程序）| |-- sax （XML解析器）| |-- services （各种服务程序）| |-- telephony （电话通讯管理）| |-- test-runner （测试工具相关）| |-- tests （各种测试）| |-- tools （一些叫不上名的工具）| |-- vpn （VPN）| `-- wifi （无线网络）|-- opt （可选部分）| |-- com.google.android （有个framework.jar）| |-- com.google.android.googlelogin （有个client.jar）| `-- emoji （standard message elements）`-- policies （Product policies are operating system directions aimed at specific uses） `-- base |-- mid （MID设备） `-- phone （手机类设备，一般用这个） 1234567891011121314151617181920212223242526272829303132333435363738394041424344hardware 目录 （部分厂家开源的硬解适配层HAL代码）|-- broadcom （博通公司）| `-- wlan （无线网卡）|-- libhardware （硬件库）| |-- include （头文件）| `-- modules （Default (and possibly architecture dependents) HAL modules）| |-- gralloc （gralloc显示相关）| `-- overlay （Skeleton for the &quot;overlay&quot; HAL module.）|-- libhardware_legacy （旧的硬件库）| |-- flashlight （背光）| |-- gps （GPS）| |-- include （头文件）| |-- mount （旧的挂载器）| |-- power （电源）| |-- qemu （模拟器）| |-- qemu_tracing （模拟器跟踪）| |-- tests （测试）| |-- uevent （uevent）| |-- vibrator （震动）| `-- wifi （无线）|-- msm7k （高通7k处理器开源抽象层）| |-- boot （启动）| |-- libaudio （声音库）| |-- libaudio-qsd8k （qsd8k的声音相关库）| |-- libcamera （摄像头库）| |-- libcopybit （copybit库）| |-- libgralloc （gralloc库）| |-- libgralloc-qsd8k （qsd8k的gralloc库）| |-- liblights （背光库）| `-- librpc （RPC库）|-- ril （无线电抽象层）| |-- include （头文件）| |-- libril （库）| |-- reference-cdma-sms （cdma短信参考）| |-- reference-ril （ril参考）| `-- rild （ril后台服务程序）`-- ti （ti公司开源HAL） |-- omap3 （omap3处理器） | |-- dspbridge （DSP桥） | |-- libopencorehw （opencore硬件库） | |-- liboverlay （overlay硬件库） | |-- libstagefrighthw （stagefright硬件库） | `-- omx （omx组件） `-- wlan （无线网卡） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758packages 目录.|-- apps （应用程序库）| |-- AlarmClock （闹钟）| |-- Bluetooth （蓝牙）| |-- Browser （浏览器）| |-- Calculator （计算器）| |-- Calendar （日历）| |-- Camera （相机）| |-- CertInstaller （在Android中安装数字签名，被调用）| |-- Contacts （拨号(调用)、联系人、通话记录）| |-- DeskClock （桌面时钟）| |-- Email （Email）| |-- Gallery （相册，和Camera类似，多了列表）| |-- Gallery3D （？3D相册）| |-- GlobalSearch （为google搜索服务，提供底层应用）| |-- GoogleSearch （google搜索）| |-- HTMLViewer （浏览器附属界面，被浏览器应用调用，同时提供存储记录功能）| |-- IM （即时通讯，为手机提供信号发送、接收、通信的服务）| |-- Launcher （登陆启动项，显示图片框架等等图形界面）| |-- Launcher2 （登陆启动项，负责应用的调用）| |-- Mms （？彩信业务）| |-- Music （音乐播放器）| |-- PackageInstaller （安装、卸载程序的响应）| |-- Phone （电话拨号程序）| |-- Provision （预设应用的状态，使能应用）| |-- Settings （开机设定，包括电量、蓝牙、设备信息、界面、wifi等）| |-- SoundRecorder （录音机，可计算存储所需空间和时间）| |-- Stk （接收和发送短信）| |-- Sync （空） -------○1| |-- Updater （空）| `-- VoiceDialer （语音识别通话）|-- inputmethods （输入法）| |-- LatinIME （拉丁文输入法）| |-- OpenWnn （OpenWnn输入法）| `-- PinyinIME （拼音输入法）|-- providers （提供器，提供应用程序、界面所需的数据）| |-- ApplicationsProvider （应用程序提供器，提供应用程序启动项、更新等）| |-- CalendarProvider （日历提供器）| |-- ContactsProvider （联系人提供器）| |-- DownloadProvider （下载管理提供器）| |-- DrmProvider （创建和更新数据库时调用）| |-- GoogleContactsProvider （联系人提供器的子类，用以同步联系人）| |-- GoogleSubscribedFeedsProvider（设置信息提供器）| |-- ImProvider （空）| |-- ManagementProvider （空）| |-- MediaProvider （媒体提供器，提供存储数据）| |-- TelephonyProvider （彩信提供器）| |-- UserDictionaryProvider （用户字典提供器，提供用户常用字字典）| `-- WebSearchProvider （空）|-- services| |-- EasService （空）| `-- LockAndWipe （空）`-- wallpapers （墙纸） |-- Basic （基本墙纸，系统内置墙纸） |-- LivePicker （选择动态壁纸） |-- MagicSmoke （壁纸特殊效果） `-- MusicVisualization （音乐可视化，图形随音乐而变化） 1234567891011121314151617181920212223prebuilt 目录 （x86和arm架构下预编译的一些资源）.|-- android-arm （arm-android相关）| |-- gdbserver （gdb调试器）| `-- kernel （模拟的arm内核）|-- android-x86 （x86-android相关）| `-- kernel （空的）|-- common （通用编译好的代码，应该是java的）|-- darwin-x86 （drawin x86平台）| `-- toolchain （工具链）| |-- arm-eabi-4.2.1 | |-- arm-eabi-4.3.1 | `-- arm-eabi-4.4.0 |-- darwin-x86_64 （drawin x86 64bit平台）|-- linux-x86 （linux x86平台）| `-- toolchain （工具链，我们应该主要用这个）| |-- arm-eabi-4.2.1 | |-- arm-eabi-4.3.1 | |-- arm-eabi-4.4.0 | `-- i686-unknown-linux-gnu-4.2.1 （x86版编译器）|-- linux-x86_64 （linux x86 64bit平台）|-- windows （windows平台）`-- windows-x86_64 （64bit windows平台） 123456789101112131415161718192021222324252627282930313233343536373839404142system 目录 （底层文件系统库、应用及组件——C语言）.|-- Bluetooth （蓝牙相关）|-- core （系统核心工具盒接口）| |-- adb （adb调试工具）| |-- cpio （cpio工具，创建img）| |-- debuggerd （调试工具）| |-- fastboot （快速启动相关）| |-- include （系统接口头文件）| |-- init （init程序源代码）| |-- libacc （轻量级C编译器）| |-- libctest （libc测试相关）| |-- libcutils （libc工具）| |-- liblog （log库）| |-- libmincrypt （加密库）| |-- libnetutils （网络工具库）| |-- libpixelflinger （图形处理库）| |-- libsysutils （系统工具库）| |-- libzipfile （zip库）| |-- logcat （查看log工具）| |-- logwrapper （log封装工具）| |-- mkbootimg （制作启动boot.img的工具盒脚本）| |-- netcfg （网络配置netcfg源码）| |-- nexus （google最新手机的代码）| |-- rootdir （rootfs，包含一些etc下的脚本和配置）| |-- sh （shell代码）| |-- toolbox （toolbox，类似busybox的工具集）| `-- vold （SD卡管理器）|-- extras （额外工具）| |-- latencytop （a tool for software developers ，identifying system latency happen）| |-- libpagemap （pagemap库）| |-- librank （Java Library Ranking System库）| |-- procmem （pagemap相关）| |-- procrank （Java Library Ranking System相关）| |-- showmap （showmap工具）| |-- showslab （showslab工具）| |-- sound （声音相关）| |-- su （su命令源码）| |-- tests （一些测试工具）| `-- timeinfo （时区相关）`-- wlan （无线相关） `-- ti （ti网卡相关工具及库） 12345678910111213141516171819202122vendor 目录 （厂家定制内容）|-- aosp （android open source project）| `-- products （一些板级规则）|-- htc （HTC公司）| |-- common-open （通用部分）| | `-- akmd （解压img用的工具）| |-- dream-open （G1开放部分）| |-- prebuilt-open （预编译开放部分）| `-- sapphire-open （sapphire这款型号开放内容）|-- pv-open （没东西）|-- qcom （里面基本是空的）`-- sample （google提供的样例） |-- apps （应用） | |-- client （用户） | `-- upgrade （升级） |-- frameworks （框架） | `-- PlatformLibrary （平台库） |-- products （产品） |-- sdk_addon （sdk添加部分） `-- skins （皮肤） `-- WVGAMedDpi （WVGA适用的图片） 123456789101112131415161718192021222324252627282930313233编译结果：out├── host SDK 中的各种工具(emulator，adb...)│ ├── common 所有主机都用的通用库(java库)│ │ └── obj│ │ └── JAVA_LIBRARIES│ └── Linux-x86 用linux-x86主机上工具程序└── target 目标机上运行的各种程序 ├── common 所有产品都用的通用程序(java程序或库) │ ├── docs 文档目录 │ ├── obj 中间文件 │ │ ├── APPS 应用程序的中间文件 │ │ └── JAVA_LIBRARIES java库的中间文件 │ └── R 资源文件(java代码形式) │ ├── android │ ├── com │ ├── jp │ └── org └── product 产品(特定平台)专用程序 └── fspad-723 fspad-723型号产品(全志A23平台)程序 ├── data 用户数据, 该目录中的内容被挂载到/data目录下 ├── obj ├── recovery 恢复版的根文件系统 ├── root 根文件系统，装有最基本的命令, 该目录中的内容被挂载到/目录下 ├── symbols ├── system 系统文件系统, 该目录中的内容被挂载到/system目录下 ------------------------------------------------------------- ├── ramdisk.img root目录打包 ├── ramdisk-recovery.img recovery目录打包 ├── boot.img kernel + ramdisk.img ├── system.img system目录打包 ├── userdata.img data目录打包 └── recovery.img kernel + ramdisk-recovery.img 参考资料： CSDN Android系统编译原理 进则净土，退则凡尘 的博客","tags":[]},{"title":"Android 开发环境配置","date":"2017-02-09T09:29:32.329Z","path":"2017/02/09/Andrid-开发环境配置/","text":"##开发环境配置 android开发，首先建议使用ubuntu或者使用Moc，当然对我这样的穷屌丝。moc是买不起的我只能使用ubuntu了。至于为什么要这样做那，理解android机制或者有过ROM开发经验的都会知道，对于处入门的小白可以不必纠结直接上ubuntu就行了。 ###1、Ubuntu 安装ubunu安装其实很简单网上有很多教程我这里就不一一展开说了,可以参考以下链接安装baidu 安装好ubutun，接下来就是安装android开发的必要环境及工具：(如果你可以翻墙可以参考谷歌官方推荐安装) openjdk安装并配置环境变量 android 源码编译必要工具sudo apt-get install git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dri:i386 libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 dpkg-devsudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so 设置usb权限（将如下内容加入到/etc/udev/rules.d/51-android.rules文件中） 12345678910111213141516171819202122232425262728293031323334# adb protocol on passion (Nexus One) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e12&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on passion (Nexus One) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0bb4&quot;, ATTR&#123;idProduct&#125;==&quot;0fff&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on crespo/crespo4g (Nexus S) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e22&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on crespo/crespo4g (Nexus S) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e20&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on stingray/wingray (Xoom) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;22b8&quot;, ATTR&#123;idProduct&#125;==&quot;70a9&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on stingray/wingray (Xoom) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;708c&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on maguro/toro (Galaxy Nexus) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;04e8&quot;, ATTR&#123;idProduct&#125;==&quot;6860&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on maguro/toro (Galaxy Nexus) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e30&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on panda (PandaBoard) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d101&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on panda (PandaBoard ES) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;d002&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on panda (PandaBoard) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d022&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # usbboot protocol on panda (PandaBoard) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d00f&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # usbboot protocol on panda (PandaBoard ES) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d010&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on grouper/tilapia (Nexus 7) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e42&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on grouper/tilapia (Nexus 7) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e40&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on manta (Nexus 10) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4ee2&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on manta (Nexus 10) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4ee0&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; git 及 repo安装没有什么难度，问一下度娘相信你一定能找到你满意的答案 以上操作成功可以下载一套安装源码试一下：国内镜像下载Android源码使用国内的镜像服务器下载，可以减少时间。安卓源码sync结束请直行以下指令123source build/envsetup.shlunch aosp_flo-userdebugmake -j8 编译结束生成的文件都在out目录下。 除此之外我还习惯使用如下工具meld（对比工具），sublime（文本编辑工具），TeamView（远程控制工具）2、安装eclipse及AS","tags":[]}]