[{"title":"Android SDK 目录详解","date":"2017-02-10T02:12:33.673Z","path":"2017/02/10/Android-SDK目录详解/","text":"对于整套安卓源码是个复杂的庞大的工程，我将尽我所能将所有目录及结构将明白，首先我们先来了解每个目录是做什么的。初级了解可以不必纠结android版本存在的差异，先做一次大体的了解。下边我基于android6.0来分析，以下是所有目录。1234567891011121314151617181920212223242526272829abi/art/bionic/ （bionic C库）bootable/ （启动引导相关代码）build/ 编译脚本（makefile shell（bash））cts/ （Android兼容性测试套件标准）dalvik/ 虚拟机相关工具developers/ 开发工具和例子程序源码development/ 开发工具和例子程序源码device/ 厂家目录docs/ 说明文档external/ 三方开源库代码（android使用的一些开源的模组）frameworks/ 应用框架源码gen/hardware/ 硬件抽象层源码（部分厂家开源的硬解适配层HAL代码）libcore/libnativehelper/Makefilendk/ 开发本地工具箱代码out/ 编译结果packages/ 应用程序及包的源码pdk/platform_testing/prebuilts/ （x86和arm架构下预编译的一些资源）projectFilesBackup/sdk/ 应用程序开发工具箱中工具源代码（sdk及模拟器）system/ 系统核心程序和本地服务程序源码（底层文件系统库、应用及组件——C语言）tools/vendor/ 厂家预制应用及修改原生系统源码（厂商定制代码） 对于这些目录，其中大部分是做安卓开发无法涉猎的，其实它也是不是我们做安卓开发所要去修改的，而是由底层ROM驱动工程师去改的。说白了就是跟我们没关系。这里只重点讲述以下几个目录：build；frameworks；external；out；packages；system；vendor；device如果你想在一款nexs上开发一套自己的全新系统了解这些足够了。（贪多吃不烂，这个道理不必多说现在开始） ##1、首先说一下android的编译原理123456789101112131415161718192021222324252627282930313233343536373839bionic 目录|-- libc （C库）| |-- arch-arm （ARM架构，包含系统调用汇编实现）| |-- arch-x86 （x86架构，包含系统调用汇编实现）| |-- bionic （由C实现的功能，架构无关）| |-- docs （文档）| |-- include （头文件）| |-- inet （？inet相关，具体作用不明）| |-- kernel （Linux内核中的一些头文件）| |-- netbsd （？nesbsd系统相关，具体作用不明）| |-- private （？一些私有的头文件）| |-- stdio （stdio实现）| |-- stdlib （stdlib实现）| |-- string （string函数实现）| |-- tools （几个工具）| |-- tzcode （时区相关代码）| |-- unistd （unistd实现）| `-- zoneinfo （时区信息）|-- libdl （libdl实现，dl是动态链接，提供访问动态链接库的功能）|-- libm （libm数学库的实现，）| |-- alpha （apaha架构）| |-- amd64 （amd64架构）| |-- arm （arm架构）| |-- bsdsrc （？bsd的源码）| |-- i386 （i386架构）| |-- i387 （i387架构？）| |-- ia64 （ia64架构）| |-- include （头文件）| |-- man （数学函数，后缀名为.3，一些为freeBSD的库文件）| |-- powerpc （powerpc架构）| |-- sparc64 （sparc64架构）| `-- src （源代码）|-- libstdc++ （libstdc++ C++实现库）| |-- include （头文件）| `-- src （源码）|-- libthread_db （多线程程序的调试器库）| `-- include （头文件）`-- linker （动态链接器）`-- arch （支持arm和x86两种架构） 123456789101112131415161718192021222324252627282930313233编译结果：out├── host SDK 中的各种工具(emulator，adb...)│ ├── common 所有主机都用的通用库(java库)│ │ └── obj│ │ └── JAVA_LIBRARIES│ └── Linux-x86 用linux-x86主机上工具程序└── target 目标机上运行的各种程序 ├── common 所有产品都用的通用程序(java程序或库) │ ├── docs 文档目录 │ ├── obj 中间文件 │ │ ├── APPS 应用程序的中间文件 │ │ └── JAVA_LIBRARIES java库的中间文件 │ └── R 资源文件(java代码形式) │ ├── android │ ├── com │ ├── jp │ └── org └── product 产品(特定平台)专用程序 └── fspad-723 fspad-723型号产品(全志A23平台)程序 ├── data 用户数据, 该目录中的内容被挂载到/data目录下 ├── obj ├── recovery 恢复版的根文件系统 ├── root 根文件系统，装有最基本的命令, 该目录中的内容被挂载到/目录下 ├── symbols ├── system 系统文件系统, 该目录中的内容被挂载到/system目录下 ------------------------------------------------------------- ├── ramdisk.img root目录打包 ├── ramdisk-recovery.img recovery目录打包 ├── boot.img kernel + ramdisk.img ├── system.img system目录打包 ├── userdata.img data目录打包 └── recovery.img kernel + ramdisk-recovery.img 参考资料： CSDN Android系统编译原理 进则净土，退则凡尘 的博客","tags":[]},{"title":"Android 开发环境配置","date":"2017-02-09T09:29:32.329Z","path":"2017/02/09/Andrid-开发环境配置/","text":"##开发环境配置 android开发，首先建议使用ubuntu或者使用Moc，当然对我这样的穷屌丝。moc是买不起的我只能使用ubuntu了。至于为什么要这样做那，理解android机制或者有过ROM开发经验的都会知道，对于处入门的小白可以不必纠结直接上ubuntu就行了。 ###1、Ubuntu 安装ubunu安装其实很简单网上有很多教程我这里就不一一展开说了,可以参考以下链接安装baidu 安装好ubutun，接下来就是安装android开发的必要环境及工具：(如果你可以翻墙可以参考谷歌官方推荐安装) openjdk安装并配置环境变量 android 源码编译必要工具sudo apt-get install git gnupg flex bison gperf build-essential zip curl libc6-dev libncurses5-dev:i386 x11proto-core-dev libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dri:i386 libgl1-mesa-dev g++-multilib mingw32 tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386 dpkg-devsudo ln -s /usr/lib/i386-linux-gnu/mesa/libGL.so.1 /usr/lib/i386-linux-gnu/libGL.so 设置usb权限（将如下内容加入到/etc/udev/rules.d/51-android.rules文件中） 12345678910111213141516171819202122232425262728293031323334# adb protocol on passion (Nexus One) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e12&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on passion (Nexus One) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0bb4&quot;, ATTR&#123;idProduct&#125;==&quot;0fff&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on crespo/crespo4g (Nexus S) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e22&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on crespo/crespo4g (Nexus S) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e20&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on stingray/wingray (Xoom) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;22b8&quot;, ATTR&#123;idProduct&#125;==&quot;70a9&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on stingray/wingray (Xoom) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;708c&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on maguro/toro (Galaxy Nexus) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;04e8&quot;, ATTR&#123;idProduct&#125;==&quot;6860&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on maguro/toro (Galaxy Nexus) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e30&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on panda (PandaBoard) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d101&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on panda (PandaBoard ES) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;d002&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on panda (PandaBoard) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d022&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # usbboot protocol on panda (PandaBoard) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d00f&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # usbboot protocol on panda (PandaBoard ES) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;0451&quot;, ATTR&#123;idProduct&#125;==&quot;d010&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on grouper/tilapia (Nexus 7) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e42&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on grouper/tilapia (Nexus 7) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4e40&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # adb protocol on manta (Nexus 10) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4ee2&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; # fastboot protocol on manta (Nexus 10) SUBSYSTEM==&quot;usb&quot;, ATTR&#123;idVendor&#125;==&quot;18d1&quot;, ATTR&#123;idProduct&#125;==&quot;4ee0&quot;, MODE=&quot;0600&quot;, OWNER=&quot;&lt;username&gt;&quot; git 及 repo安装没有什么难度，问一下度娘相信你一定能找到你满意的答案 以上操作成功可以下载一套安装源码试一下：国内镜像下载Android源码使用国内的镜像服务器下载，可以减少时间。安卓源码sync结束请直行以下指令123source build/envsetup.shlunch aosp_flo-userdebugmake -j8 编译结束生成的文件都在out目录下。 除此之外我还习惯使用如下工具meld（对比工具），sublime（文本编辑工具），TeamView（远程控制工具）2、安装eclipse及AS","tags":[]}]